RMD:
  general_settings:
    alpha: 1                                        # rate to control difference between semantic and pragmatic violations
    lam: 20                                         # soft-max parameter for speaker/hearer matrices
    k: 15                                           # length of observation sequences
    sample_amount: 50                               # amount of k-length samples for each production type
    learning_parameter: 15                          # prob-matching = 1, increments approach MAP

    gens: 50                                        # number of generations per simulation run
    runs: 1                                         # number of independent simulation runs

  states_and_messages:
    states: 3                                       # number of states
    messages: [2,3]                                 # list with number of messages

  models:
    kind: "rmd"                                     # "rmd" (replicator-mutator-dynamics), "r" (only replicator), "m" (only mutator)
    cost: "brochhagen"                              # brochhagen, building_blocks, uegaki (only 4 states) or equal
    mutual_utility_calculation: "uegaki"            # brochhagen or uegaki

  other_features:
    state_priors: False                              # priors over states as list [0.5, 0.25, 0.25], False (=flat) or "grid" to test all possible priors
    utility_message_cost: False                     # takes also costs for messages for the communicative success into account 
    negation_rate: False                            # percentage of negated statements sampled in the mutator dynamics 

    puzzle: True                                    # if True, only allows for the 4 corneres from the typological puzzle and pragmatic players
    only_prag: True

    mutual_exclusivity: False                       # if True, no concept assigned to more than one message

  storing_results:
    result_path: "example_folder"                   # path to store results

  plotting_info:
    print_x: 1                                                    # number of best types to show in the result plots, if 0 no plots at all
    target_lex: [[1, 1, 0], [0, 1, 0], [0,0,1]]                   # lexicon of target type (to show in plot)
    target_level: ["pragmatic"]                                   # level (literal or pragmatic) of target type

    competitor_lex: [[1, 1, 0], [0, 1, 1], [0,0,1]]               # lexicon of competitor type (to show in plot)

    competitor_level: ["pragmatic"]                               # level (literal or pragmatic) of competitor type
  




